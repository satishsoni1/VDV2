import 'dart:convert';import 'package:blog_app/data/blog_list_holder.dart';import 'package:blog_app/helpers/network_helper.dart';import 'package:blog_app/helpers/urls.dart';import 'package:blog_app/models/blog_category.dart';import 'package:blog_app/providers/app_provider.dart';import 'package:blog_app/repository/user_repository.dart';import 'package:flutter/material.dart';import 'package:flutter/scheduler.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:hexcolor/hexcolor.dart';import 'package:http/http.dart' as http;import 'package:loading_overlay/loading_overlay.dart';import 'package:provider/provider.dart';import '../appColors.dart';import '../app_theme.dart';import 'SwipeablePage.dart';class SelectCategories extends StatefulWidget {  bool isFromDrawer;  SelectCategories({this.isFromDrawer = false});  @override  _SelectCategoriesState createState() => _SelectCategoriesState();}class _SelectCategoriesState extends State<SelectCategories> {  List tags = [    'Lifestyle',    'Travel',    'Fitness',    'Education',    'Technoligy',    'Politics',    'Sports'  ];  bool load = false;  AppProvider appProvider = AppProvider();  Future setCategory(List<Datum?> data) async {    List<int> feed = [];    for (int i = 0; i < data.length; i++) {      if (data[i]!.isMyFeed) {        feed.add(data[i]!.id ?? 0);      }    }    if (feed.length < 3) {      Fluttertoast.showToast(          msg: "Minimum 3 should be selecte",          toastLength: Toast.LENGTH_SHORT,          gravity: ToastGravity.BOTTOM,          timeInSecForIos: 5,          backgroundColor: appMainColor,          textColor: Colors.white);    } else {      bool isInternet = await NetworkHelper.isInternetIsOn();      if (isInternet) {        print('setCategory is called');        print(feed.toString());        Map<String, dynamic> formMap = {          'userId': currentUser.value.id,          "feed": feed.join(",")        };        try {          setState(() {            load = true;          });          var url = "${Urls.baseUrl}add_feed";          var result = await http.post(            Uri.parse(url),            headers: {"Content-Type": "application/x-www-form-urlencoded"},            encoding: Encoding.getByName('utf-8'),            body: formMap,          );          print(result.body);          Map data = json.decode(result.body);          if (result.statusCode == 200) {            AppProvider();            Fluttertoast.showToast(                msg: data['message'],                toastLength: Toast.LENGTH_SHORT,                gravity: ToastGravity.BOTTOM,                timeInSecForIos: 5,                backgroundColor: appMainColor,                textColor: Colors.white);            if (widget.isFromDrawer) {              Navigator.pop(context);              Navigator.pop(context);            }            if (!widget.isFromDrawer) {              await getLatestBlog();              Navigator.pushNamedAndRemoveUntil(                  context, '/MainPage', (Route<dynamic> route) => false);              SchedulerBinding.instance.addPostFrameCallback((_) {                Navigator.of(context).push(                  MaterialPageRoute(builder: (context) {                    return SwipeablePage(0);                  }),                );              });            }          }          print(result.body);          setState(() {            load = false;          });        } catch (e) {          print(e);          setState(() {            load = false;          });        }      }    }  }  Future getLatestBlog() async {    bool isInternet = await NetworkHelper.isInternetIsOn();    if (isInternet) {      setState(() {        load = true;      });      var url = "${Urls.baseUrl}getFeed/${currentUser.value.id ?? 0}";      print(url);      var result = await http.get(        Uri.parse(url),      );      Map data = json.decode(result.body);      print(          "result ${data['data'].length} ${currentUser.value.id} ${languageCode.value.language ?? "null"}");      final list = Blog.fromJson(data['data']);      if (list != null) {        setState(() {          blogListHolder.clearList();          blogListHolder.setList(list);          blogListHolder.setIndex(0);        });        setState(() {          load = false;        });      }    }  }  @override  void initState() {    // TODO: implement initState    super.initState();    getCategory();  }  getCategory() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {      await Provider.of<AppProvider>(context, listen: false)          .getSettingCategory();    });  }  @override  Widget build(BuildContext context) {    final height = MediaQuery.of(context).size.height;    final width = MediaQuery.of(context).size.width;    return Consumer<AppProvider>(builder: (context, snapshot, _) {      return WillPopScope(          onWillPop: () async {            for (int i = 0; i < (snapshot.blog?.data?.length ?? 0); i++) {              snapshot.blog?.data?[i].isMyFeed = false;            }            if (!widget.isFromDrawer) {              return false;            } else {              print('sign out');              Navigator.of(context).pop(true);              return true;            }          },          child: Scaffold(              body: LoadingOverlay(                  isLoading: load,                  child: Stack(                    children: [                      Container(                        color: !appThemeModel.value.isDarkModeEnabled.value                            ? HexColor("#ffffff")                            : Theme.of(context).cardColor,                        height: height,                        width: width,                        child: Column(                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [                            SizedBox(                              height: height * 0.15,                            ),                            Padding(                              padding: EdgeInsets.only(left: 25, right: 25),                              child: Text(                                allMessages.value                                        .saveYourInterestsForBetterContentExperience ??                                    'Save your interests for \nbetter content & \nexperience.',                                style: TextStyle(                                    fontSize: 30,                                    fontWeight: FontWeight.w600,                                    color: appMainColor),                              ),                            ),                            SizedBox(                              height: height * 0.02,                            ),                            Padding(                              padding:                                  const EdgeInsets.only(left: 25, right: 35),                              child: Wrap(                                spacing: 10,                                children: [                                  for (var item in snapshot.blog!.data!)                                    GestureDetector(                                        onTap: () {                                          snapshot.changeSelectCategories(item);                                        },                                        child: Container(                                          margin:                                              EdgeInsets.symmetric(vertical: 5),                                          padding: EdgeInsets.symmetric(                                              vertical: 10, horizontal: 15),                                          decoration: BoxDecoration(                                              color: item.isMyFeed                                                  ? !appThemeModel                                                          .value                                                          .isDarkModeEnabled                                                          .value                                                      ? appMainColor                                                      : HexColor("#000000")                                                  : Colors.transparent,                                              borderRadius:                                                  BorderRadius.circular(25),                                              border: Border.all(                                                  color: item.isMyFeed                                                      ? appThemeModel                                                              .value                                                              .isDarkModeEnabled                                                              .value                                                          ? appMainColor                                                          : HexColor("#ffffff")                                                      : appMainColor)),                                          child: Text(                                            item.name.toString(),                                            style: TextStyle(                                                fontSize: 16,                                                color: item.isMyFeed                                                    ? appThemeModel                                                            .value                                                            .isDarkModeEnabled                                                            .value                                                        ? appMainColor                                                        : HexColor("#ffffff")                                                    : appMainColor),                                          ),                                        ))                                ],                              ),                            ),                            Spacer(),                            GestureDetector(                                onTap: () async {                                  print('click button');                                  await setCategory(snapshot.blog!.data!);                                },                                child: Container(                                  width: width,                                  margin: EdgeInsets.symmetric(                                      horizontal: 25, vertical: 25),                                  padding: EdgeInsets.symmetric(vertical: 18),                                  decoration: BoxDecoration(                                      color: !appThemeModel                                              .value.isDarkModeEnabled.value                                          ? Colors.white                                          : HexColor("#000000"),                                      borderRadius: BorderRadius.circular(10),                                      border: Border.all(                                          color: !appThemeModel                                                  .value.isDarkModeEnabled.value                                              ? appMainColor                                              : HexColor("#000000"))),                                  child: Center(                                      child: Text(                                    allMessages.value.saveInterests ??                                        'Save Interests',                                    style: TextStyle(                                        fontSize: 18,                                        color: appMainColor,                                        fontWeight: FontWeight.w600),                                  )),                                )),                          ],                        ),                      ),                      if (widget.isFromDrawer)                        Positioned(                            left: 25,                            top: 45,                            child: Container(                              height: 45,                              width: 45,                              decoration: BoxDecoration(                                shape: BoxShape.circle,                                color: appMainColor,                              ),                              child: IconButton(                                icon: Icon(                                  Icons.arrow_back,                                  color: Theme.of(context).cardColor,                                ),                                onPressed: () {                                  for (int i = 0; i < (snapshot.blog?.data?.length ?? 0); i++) {                                    snapshot.blog?.data?[i].isMyFeed = false;                                  }                                  Navigator.pop(context);                                },                              ),                            )),                    ],                  ))));    });  }}